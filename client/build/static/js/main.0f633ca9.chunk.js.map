{"version":3,"sources":["App.js","index.js"],"names":["socket","io","ModalContent","props","date","channel","Date","toLocaleTimeString","Modal","modalPosition","showModal","setShowModal","chatElement","style","content","isOpen","contentLabel","onRequestClose","overlayClassName","className","onClick","time","ChannelChat","console","log","channelChat","setChatElement","setModalPosition","map","Message","username","userstate","text","message","usernameColor","color","event","left","clientX","top","clientY","right","bottom","App","chatTesting","useState","chat","setChat","getChats","Array","from","Set","item","chats","name","filter","useEffect","cb","err","on","emit","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f633ca9.chunk.js","sourcesContent":["import './app.css'\nimport {io} from 'socket.io-client';\nimport React, {useEffect, useRef, useState} from \"react\";\nimport ReactModal from 'react-modal';\n\n\n// const socket = openSocket('localhost:8000/');\nconst localhost = \"localhost\"\nconst heroku = \"https://lit-citadel-01156.herokuapp.com\"\nconst socket = io(`${heroku}` )\n// const socket = io(`${localhost}:${5000}`)\n\nlet ModalContent = (props) => {\n\n\n    let {date, channel} = props\n    date = new Date(date).toLocaleTimeString(\"ru-RU\")\n\n    return <div> {`[${date}] (${channel})`} </div>\n}\nlet Modal = (props) => {\n    let {modalPosition, showModal, setShowModal, chatElement} = props\n    return <ReactModal\n        style={{content: modalPosition}}\n        isOpen={showModal}\n        contentLabel=\"Minimal Modal Example\"\n        onRequestClose={() => setShowModal(false)}\n        overlayClassName=\"Overlay\"\n        className=\"Modal\"\n\n    >\n        <button onClick={() => setShowModal(false)}>Close Modal</button>\n        <ModalContent date={chatElement.time} channel={chatElement.channel}/>\n    </ReactModal>\n}\nlet ChannelChat = (props) => {\n    console.log(props)\n    let {channelChat, setChatElement, setModalPosition, setShowModal, showModal} = props;\n    return <div className=\"channelChat\">\n        {channelChat.map(chatElement => {\n            return <Message\n                setChatElement={setChatElement}\n                setModalPosition={setModalPosition}\n                showModal={showModal}\n                setShowModal={setShowModal} chatElement={chatElement}/>\n        })}\n    </div>\n}\nlet Message = (props) => {\n    let {setModalPosition, setChatElement, setShowModal} = props\n    let chatElement = props.chatElement\n    let username = chatElement.userstate.username\n    let text = chatElement.message\n    let usernameColor = {\n        color: chatElement.userstate.color\n    }\n\n\n    return <>\n        <div>\n    <span onClick={(event) => {\n        console.log(\"onClick elemenet\", chatElement)\n        setModalPosition({left: event.clientX + \"px\", top: event.clientY + \"px\", right: \"20px\", bottom: \"20px\"})\n        setShowModal(true)\n        setChatElement(chatElement)\n\n    }} style={usernameColor}> {username} : </span>\n            <span> {text}</span>\n        </div>\n    </>\n}\n\nfunction App() {\n    let chatTesting = [\n        {userstate: {username: \"test1\", color: \"black\"}, message: \"testing\", channel: \"1\", time: new Date()},\n        {userstate: {username: \"test2\", color: \"black\"}, message: \"testing\", channel: \"2\", time: new Date()},\n        {userstate: {username: \"test3\", color: \"black\"}, message: \"testing\", channel: \"3\", time: new Date()},\n        {userstate: {username: \"test\", color: \"black\"}, message: \"testing\", channel: \"3\", time: new Date()},\n        {userstate: {username: \"test\", color: \"black\"}, message: \"testing\", channel: \"testingChannel\", time: new Date()}\n    ]\n\n    let [showModal, setShowModal] = useState(false)\n    let [modalPosition, setModalPosition] = useState({left: \"10px\", top: \"10px\", right: \"10px\", bottom: \"10px\"})\n    let [chat, setChat] = useState(chatTesting)\n    let [chatElement, setChatElement] = useState(chat[0])\n\n    function getChats(chat) {\n        const chats = Array.from(new Set(chat.map(item => item.channel)));\n        return chats.map(item => {\n            const chats = item ? {name: item} : null;\n\n            return {\n                ...chats,\n                chat: chat.filter(chatElement => chatElement.channel === item)\n            };\n        });\n    }\n\n    let chats = getChats(chat);\n    console.log(getChats(chat))\n    console.log(\"chat\", chat)\n    console.log(\"chatElement\", chatElement)\n\n    function subscribeToChat(cb) {\n        socket.on('chat', chat => {\n            console.log(\"receive chat\", chat)\n            cb(null, chat)\n        });\n        socket.emit('subscribeToChat', 1000);\n    }\n\n    useEffect(() => {\n        console.log(\"subscribe to chat\")\n        subscribeToChat((err, chat) => {\n            setChat(chat)\n        })\n    }, [])\n    return <div>\n        <Modal modalPosition={modalPosition} showModal={showModal} setShowModal={setShowModal} chatElement={chatElement}/>\n        {chats.map(channel => {\n            console.log(channel)\n            return <div>\n                {channel.name}\n                <ChannelChat\n                    setChatElement={setChatElement}\n                    setModalPosition={setModalPosition}\n                    setShowModal={setShowModal}\n                    showModal={showModal}\n                    channelChat={channel.chat}/>\n            </div>\n        })}\n    </div>\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}